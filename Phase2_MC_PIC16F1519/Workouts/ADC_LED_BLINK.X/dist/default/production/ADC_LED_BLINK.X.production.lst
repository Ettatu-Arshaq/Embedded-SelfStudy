

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Mon Oct 20 12:29:49 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F1519
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12     0000                     
    13                           ; Generated 07/09/2023 GMT
    14                           ; 
    15                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution. Publication is not required when
    29                           ;        this file is used in an embedded application.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F1519 Definitions
    45                           ; 
    46                           ; SFR Addresses
    47     0008                     bsr             equ	8
    48     0005                     fsr0h           equ	5
    49     0004                     fsr0l           equ	4
    50     0007                     fsr1h           equ	7
    51     0006                     fsr1l           equ	6
    52     0000                     indf            equ	0
    53     0000                     indf0           equ	0
    54     0001                     indf1           equ	1
    55     000B                     intcon          equ	11
    56     0002                     pc              equ	2
    57     0002                     pcl             equ	2
    58     000A                     pclath          equ	10
    59     0003                     status          equ	3
    60     0009                     wreg            equ	9
    61     0000                     INDF0           equ	0	;# 
    62     0001                     INDF1           equ	1	;# 
    63     0002                     PCL             equ	2	;# 
    64     0003                     STATUS          equ	3	;# 
    65     0004                     FSR0L           equ	4	;# 
    66     0005                     FSR0H           equ	5	;# 
    67     0006                     FSR1L           equ	6	;# 
    68     0007                     FSR1H           equ	7	;# 
    69     0008                     BSR             equ	8	;# 
    70     0009                     WREG            equ	9	;# 
    71     000A                     PCLATH          equ	10	;# 
    72     000B                     INTCON          equ	11	;# 
    73     000C                     PORTA           equ	12	;# 
    74     000D                     PORTB           equ	13	;# 
    75     000E                     PORTC           equ	14	;# 
    76     000F                     PORTD           equ	15	;# 
    77     0010                     PORTE           equ	16	;# 
    78     0011                     PIR1            equ	17	;# 
    79     0012                     PIR2            equ	18	;# 
    80     0015                     TMR0            equ	21	;# 
    81     0016                     TMR1            equ	22	;# 
    82     0016                     TMR1L           equ	22	;# 
    83     0017                     TMR1H           equ	23	;# 
    84     0018                     T1CON           equ	24	;# 
    85     0019                     T1GCON          equ	25	;# 
    86     001A                     TMR2            equ	26	;# 
    87     001B                     PR2             equ	27	;# 
    88     001C                     T2CON           equ	28	;# 
    89     008C                     TRISA           equ	140	;# 
    90     008D                     TRISB           equ	141	;# 
    91     008E                     TRISC           equ	142	;# 
    92     008F                     TRISD           equ	143	;# 
    93     0090                     TRISE           equ	144	;# 
    94     0091                     PIE1            equ	145	;# 
    95     0092                     PIE2            equ	146	;# 
    96     0095                     OPTION_REG      equ	149	;# 
    97     0096                     PCON            equ	150	;# 
    98     0097                     WDTCON          equ	151	;# 
    99     0099                     OSCCON          equ	153	;# 
   100     009A                     OSCSTAT         equ	154	;# 
   101     009B                     ADRES           equ	155	;# 
   102     009B                     ADRESL          equ	155	;# 
   103     009C                     ADRESH          equ	156	;# 
   104     009D                     ADCON0          equ	157	;# 
   105     009E                     ADCON1          equ	158	;# 
   106     010C                     LATA            equ	268	;# 
   107     010D                     LATB            equ	269	;# 
   108     010E                     LATC            equ	270	;# 
   109     010F                     LATD            equ	271	;# 
   110     0110                     LATE            equ	272	;# 
   111     0116                     BORCON          equ	278	;# 
   112     0117                     FVRCON          equ	279	;# 
   113     011D                     APFCON          equ	285	;# 
   114     018C                     ANSELA          equ	396	;# 
   115     018D                     ANSELB          equ	397	;# 
   116     018E                     ANSELC          equ	398	;# 
   117     018F                     ANSELD          equ	399	;# 
   118     0190                     ANSELE          equ	400	;# 
   119     0191                     PMADR           equ	401	;# 
   120     0191                     PMADRL          equ	401	;# 
   121     0192                     PMADRH          equ	402	;# 
   122     0193                     PMDAT           equ	403	;# 
   123     0193                     PMDATL          equ	403	;# 
   124     0194                     PMDATH          equ	404	;# 
   125     0195                     PMCON1          equ	405	;# 
   126     0196                     PMCON2          equ	406	;# 
   127     0197                     VREGCON         equ	407	;# 
   128     0199                     RCREG           equ	409	;# 
   129     019A                     TXREG           equ	410	;# 
   130     019B                     SP1BRG          equ	411	;# 
   131     019B                     SP1BRGL         equ	411	;# 
   132     019B                     SPBRG           equ	411	;# 
   133     019B                     SPBRGL          equ	411	;# 
   134     019C                     SP1BRGH         equ	412	;# 
   135     019C                     SPBRGH          equ	412	;# 
   136     019D                     RCSTA           equ	413	;# 
   137     019E                     TXSTA           equ	414	;# 
   138     019F                     BAUDCON         equ	415	;# 
   139     020D                     WPUB            equ	525	;# 
   140     0210                     WPUE            equ	528	;# 
   141     0211                     SSPBUF          equ	529	;# 
   142     0211                     SSP1BUF         equ	529	;# 
   143     0212                     SSPADD          equ	530	;# 
   144     0212                     SSP1ADD         equ	530	;# 
   145     0213                     SSPMSK          equ	531	;# 
   146     0213                     SSP1MSK         equ	531	;# 
   147     0214                     SSPSTAT         equ	532	;# 
   148     0214                     SSP1STAT        equ	532	;# 
   149     0215                     SSPCON1         equ	533	;# 
   150     0215                     SSPCON          equ	533	;# 
   151     0215                     SSP1CON1        equ	533	;# 
   152     0216                     SSPCON2         equ	534	;# 
   153     0216                     SSP1CON2        equ	534	;# 
   154     0217                     SSPCON3         equ	535	;# 
   155     0217                     SSP1CON3        equ	535	;# 
   156     0291                     CCPR1           equ	657	;# 
   157     0291                     CCPR1L          equ	657	;# 
   158     0292                     CCPR1H          equ	658	;# 
   159     0293                     CCP1CON         equ	659	;# 
   160     0298                     CCPR2           equ	664	;# 
   161     0298                     CCPR2L          equ	664	;# 
   162     0299                     CCPR2H          equ	665	;# 
   163     029A                     CCP2CON         equ	666	;# 
   164     0394                     IOCBP           equ	916	;# 
   165     0395                     IOCBN           equ	917	;# 
   166     0396                     IOCBF           equ	918	;# 
   167     0FE4                     STATUS_SHAD     equ	4068	;# 
   168     0FE5                     WREG_SHAD       equ	4069	;# 
   169     0FE6                     BSR_SHAD        equ	4070	;# 
   170     0FE7                     PCLATH_SHAD     equ	4071	;# 
   171     0FE8                     FSR0L_SHAD      equ	4072	;# 
   172     0FE9                     FSR0H_SHAD      equ	4073	;# 
   173     0FEA                     FSR1L_SHAD      equ	4074	;# 
   174     0FEB                     FSR1H_SHAD      equ	4075	;# 
   175     0FED                     STKPTR          equ	4077	;# 
   176     0FEE                     TOSL            equ	4078	;# 
   177     0FEF                     TOSH            equ	4079	;# 
   178     009B                     _ADRESL         set	155
   179     009C                     _ADRESH         set	156
   180     009D                     _ADCON0bits     set	157
   181     009E                     _ADCON1         set	158
   182     009D                     _ADCON0         set	157
   183     008C                     _TRISAbits      set	140
   184     010C                     _LATAbits       set	268
   185     018C                     _ANSELAbits     set	396
   186                           
   187                           	psect	cinit
   188     07FB                     start_initialization:	
   189                           ; #config settings
   190                           
   191     07FB                     __initialization:
   192                           
   193                           ; Clear objects allocated to COMMON
   194     07FB  01F0               	clrf	__pbssCOMMON& (0+127)
   195     07FC  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   196     07FD                     end_of_initialization:	
   197                           ;End of C runtime variable initialization code
   198                           
   199     07FD                     __end_of__initialization:
   200     07FD  0020               	movlb	0
   201     07FE  3187  2FD6         	ljmp	_main	;jump to C main() function
   202                           
   203                           	psect	bssCOMMON
   204     0070                     __pbssCOMMON:
   205     0070                     _result:
   206     0070                     	ds	2
   207                           
   208                           	psect	cstackCOMMON
   209     0072                     __pcstackCOMMON:
   210     0072                     ?_blink:
   211     0072                     ?_adc_init:	
   212                           ; 1 bytes @ 0x0
   213                           
   214     0072                     ?_main:	
   215                           ; 1 bytes @ 0x0
   216                           
   217     0072                     ??_blink:	
   218                           ; 1 bytes @ 0x0
   219                           
   220     0072                     ??_adc_init:	
   221                           ; 1 bytes @ 0x0
   222                           
   223     0072                     ??_main:	
   224                           ; 1 bytes @ 0x0
   225                           
   226                           
   227                           ; 1 bytes @ 0x0
   228     0072                     	ds	1
   229                           
   230                           	psect	maintext
   231     07D6                     __pmaintext:	
   232 ;;
   233 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   234 ;;
   235 ;; *************** function _main *****************
   236 ;; Defined at:
   237 ;;		line 45 in file "newmain.c"
   238 ;; Parameters:    Size  Location     Type
   239 ;;		None
   240 ;; Auto vars:     Size  Location     Type
   241 ;;		None
   242 ;; Return value:  Size  Location     Type
   243 ;;                  1    wreg      void 
   244 ;; Registers used:
   245 ;;		wreg, status,2, status,0, pclath, cstack
   246 ;; Tracked objects:
   247 ;;		On entry : B1F/0
   248 ;;		On exit  : 0/0
   249 ;;		Unchanged: 0/0
   250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   253 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   254 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   255 ;;Total ram usage:        1 bytes
   256 ;; Hardware stack levels required when called: 1
   257 ;; This function calls:
   258 ;;		_adc_init
   259 ;;		_blink
   260 ;; This function is called by:
   261 ;;		Startup code after reset
   262 ;; This function uses a non-reentrant model
   263 ;;
   264                           
   265     07D6                     _main:	
   266                           ;psect for function _main
   267                           
   268     07D6                     l565:	
   269                           ;incstack = 0
   270                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   271                           
   272                           
   273                           ;newmain.c: 46:     adc_init();
   274     07D6  3187  27C0  3187   	fcall	_adc_init
   275     07D9                     l567:
   276                           
   277                           ;newmain.c: 47:     ANSELAbits.ANSA1=0;
   278     07D9  0023               	movlb	3	; select bank3
   279     07DA  108C               	bcf	12,1	;volatile
   280     07DB                     l569:
   281                           
   282                           ;newmain.c: 48:     TRISAbits.TRISA1=0;
   283     07DB  0021               	movlb	1	; select bank1
   284     07DC  108C               	bcf	12,1	;volatile
   285     07DD                     l571:
   286                           
   287                           ;newmain.c: 49:     ADCON0bits.GO=1;
   288     07DD  149D               	bsf	29,1	;volatile
   289     07DE                     l31:	
   290                           ;newmain.c: 50:     while(ADCON0bits.GO);
   291                           
   292     07DE  189D               	btfsc	29,1	;volatile
   293     07DF  2FE1               	goto	u31
   294     07E0  2FE2               	goto	u30
   295     07E1                     u31:
   296     07E1  2FDE               	goto	l31
   297     07E2                     u30:
   298     07E2                     l573:
   299                           
   300                           ;newmain.c: 51:     result=((ADRESH<<8)|ADRESL);
   301     07E2  081C               	movf	28,w	;volatile
   302     07E3  00F1               	movwf	_result+1
   303     07E4  081B               	movf	27,w	;volatile
   304     07E5  00F0               	movwf	_result
   305                           
   306                           ;newmain.c: 52:     if (result>500){
   307     07E6  3001               	movlw	1
   308     07E7  0271               	subwf	_result+1,w
   309     07E8  30F5               	movlw	245
   310     07E9  1903               	skipnz
   311     07EA  0270               	subwf	_result,w
   312     07EB  1C03               	skipc
   313     07EC  2FEE               	goto	u41
   314     07ED  2FEF               	goto	u40
   315     07EE                     u41:
   316     07EE  2FF2               	goto	l577
   317     07EF                     u40:
   318     07EF                     l575:
   319                           
   320                           ;newmain.c: 53:         blink();
   321     07EF  3187  27C9  3187   	fcall	_blink
   322     07F2                     l577:
   323                           
   324                           ;newmain.c: 55:     _delay((unsigned long)((100)*(4000000/4000.0)));
   325     07F2  3082               	movlw	130
   326     07F3  00F2               	movwf	??_main
   327     07F4  30DE               	movlw	222
   328     07F5                     u57:
   329     07F5  0B89               	decfsz	9,f
   330     07F6  2FF5               	goto	u57
   331     07F7  0BF2               	decfsz	??_main,f
   332     07F8  2FF5               	goto	u57
   333     07F9                     l35:
   334     07F9  3180  2802         	ljmp	start
   335     07FB                     __end_of_main:
   336                           
   337                           	psect	text1
   338     07C9                     __ptext1:	
   339 ;; *************** function _blink *****************
   340 ;; Defined at:
   341 ;;		line 34 in file "newmain.c"
   342 ;; Parameters:    Size  Location     Type
   343 ;;		None
   344 ;; Auto vars:     Size  Location     Type
   345 ;;		None
   346 ;; Return value:  Size  Location     Type
   347 ;;                  1    wreg      void 
   348 ;; Registers used:
   349 ;;		status,0
   350 ;; Tracked objects:
   351 ;;		On entry : 0/0
   352 ;;		On exit  : 0/0
   353 ;;		Unchanged: 0/0
   354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   359 ;;Total ram usage:        0 bytes
   360 ;; Hardware stack levels used: 1
   361 ;; This function calls:
   362 ;;		Nothing
   363 ;; This function is called by:
   364 ;;		_main
   365 ;; This function uses a non-reentrant model
   366 ;;
   367                           
   368     07C9                     _blink:	
   369                           ;psect for function _blink
   370                           
   371     07C9                     l561:	
   372                           ;incstack = 0
   373                           ; Regs used in _blink: [status,0]
   374                           
   375                           
   376                           ;newmain.c: 35:     LATAbits.LATA1=!LATAbits.LATA1;
   377     07C9  1003               	clrc
   378     07CA  0022               	movlb	2	; select bank2
   379     07CB  1C8C               	btfss	12,1	;volatile
   380     07CC  1403               	setc
   381     07CD  1803               	btfsc	3,0
   382     07CE  2FD0               	goto	u11
   383     07CF  2FD3               	goto	u10
   384     07D0                     u11:
   385     07D0  0022               	movlb	2	; select bank2
   386     07D1  148C               	bsf	12,1	;volatile
   387     07D2  2FD5               	goto	u24
   388     07D3                     u10:
   389     07D3  0022               	movlb	2	; select bank2
   390     07D4  108C               	bcf	12,1	;volatile
   391     07D5                     u24:
   392     07D5                     l23:
   393     07D5  0008               	return
   394     07D6                     __end_of_blink:
   395                           
   396                           	psect	text2
   397     07C0                     __ptext2:	
   398 ;; *************** function _adc_init *****************
   399 ;; Defined at:
   400 ;;		line 37 in file "newmain.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;		None
   403 ;; Auto vars:     Size  Location     Type
   404 ;;		None
   405 ;; Return value:  Size  Location     Type
   406 ;;                  1    wreg      void 
   407 ;; Registers used:
   408 ;;		None
   409 ;; Tracked objects:
   410 ;;		On entry : 0/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   418 ;;Total ram usage:        0 bytes
   419 ;; Hardware stack levels used: 1
   420 ;; This function calls:
   421 ;;		Nothing
   422 ;; This function is called by:
   423 ;;		_main
   424 ;; This function uses a non-reentrant model
   425 ;;
   426                           
   427     07C0                     _adc_init:	
   428                           ;psect for function _adc_init
   429                           
   430     07C0                     l563:	
   431                           ;incstack = 0
   432                           ; Regs used in _adc_init: []
   433                           
   434                           
   435                           ;newmain.c: 39:     ANSELAbits.ANSA0=1;
   436     07C0  0023               	movlb	3	; select bank3
   437     07C1  140C               	bsf	12,0	;volatile
   438                           
   439                           ;newmain.c: 40:     TRISAbits.TRISA0=1;
   440     07C2  0021               	movlb	1	; select bank1
   441     07C3  140C               	bsf	12,0	;volatile
   442                           
   443                           ;newmain.c: 41:     ADCON0=0x01;
   444     07C4  3001               	movlw	1
   445     07C5  009D               	movwf	29	;volatile
   446                           
   447                           ;newmain.c: 42:     ADCON1=0xF0;
   448     07C6  30F0               	movlw	240
   449     07C7  009E               	movwf	30	;volatile
   450     07C8                     l26:
   451     07C8  0008               	return
   452     07C9                     __end_of_adc_init:
   453     0003                     ___latbits      equ	3
   454     007E                     btemp           set	126	;btemp
   455     007E                     wtemp0          set	126
   456                           
   457                           	psect	config
   458                           
   459                           ;Config register CONFIG1 @ 0x8007
   460                           ;	Oscillator Selection
   461                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
   462                           ;	Watchdog Timer Enable
   463                           ;	WDTE = ON, WDT enabled
   464                           ;	Power-up Timer Enable
   465                           ;	PWRTE = OFF, PWRT disabled
   466                           ;	MCLR Pin Function Select
   467                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
   468                           ;	Flash Program Memory Code Protection
   469                           ;	CP = OFF, Program memory code protection is disabled
   470                           ;	Brown-out Reset Enable
   471                           ;	BOREN = OFF, Brown-out Reset disabled
   472                           ;	Clock Out Enable
   473                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
   474                           ;	Internal/External Switchover
   475                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   476                           ;	Fail-Safe Clock Monitor Enable
   477                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   478     8007                     	org	32775
   479     8007  09FC               	dw	2556
   480                           
   481                           ;Config register CONFIG2 @ 0x8008
   482                           ;	Flash Memory Self-Write Protection
   483                           ;	WRT = OFF, Write protection off
   484                           ;	Voltage Regulator Capacitor Enable bit
   485                           ;	VCAPEN = OFF, VCAP pin function disabled
   486                           ;	Stack Overflow/Underflow Reset Enable
   487                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
   488                           ;	Brown-out Reset Voltage Selection
   489                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
   490                           ;	Low-Power Brown Out Reset
   491                           ;	LPBOR = OFF, Low-Power BOR is disabled
   492                           ;	Low-Voltage Programming Enable
   493                           ;	LVP = ON, Low-voltage programming enabled
   494     8008                     	org	32776
   495     8008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      1       3
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                              0 COMMON     1     1      0
                           _adc_init
                              _blink
 ---------------------------------------------------------------------------------
 (1) _blink                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_init
   _blink

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            80      0       0      0.0%
BITBANK5            80      0       0      0.0%
BITBANK6            80      0       0      0.0%
BITBANK7            80      0       0      0.0%
BITBANK8            80      0       0      0.0%
BITBANK9            80      0       0      0.0%
BITBANK10           80      0       0      0.0%
BITBANK11           80      0       0      0.0%
BITBANK12           48      0       0      0.0%
BIGRAM            1008      0       0      0.0%
COMMON              14      1       3     21.4%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK2               80      0       0      0.0%
BANK3               80      0       0      0.0%
BANK4               80      0       0      0.0%
BANK5               80      0       0      0.0%
BANK6               80      0       0      0.0%
BANK7               80      0       0      0.0%
BANK8               80      0       0      0.0%
BANK9               80      0       0      0.0%
BANK10              80      0       0      0.0%
BANK11              80      0       0      0.0%
BANK12              48      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       3      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Mon Oct 20 12:29:49 2025

                     l23 07D5                       l31 07DE                       l26 07C8  
                     l35 07F9                       u10 07D3                       u11 07D0  
                     u30 07E2                       u31 07E1                       u24 07D5  
                     u40 07EF                       u41 07EE                       u57 07F5  
                    l561 07C9                      l563 07C0                      l571 07DD  
                    l573 07E2                      l565 07D6                      l575 07EF  
                    l567 07D9                      l577 07F2                      l569 07DB  
                    wreg 0009                     _main 07D6                     btemp 007E  
                   start 0002                    ?_main 0072                    _blink 07C9  
                  status 0003                    wtemp0 007E          __initialization 07FB  
           __end_of_main 07FB                   ??_main 0072                   ?_blink 0072  
                 _ADCON0 009D                   _ADCON1 009E                   _ADRESH 009C  
                 _ADRESL 009B         __end_of_adc_init 07C9                   _result 0070  
__end_of__initialization 07FD           __pcstackCOMMON 0072            __end_of_blink 07D6  
                ??_blink 0072               __pmaintext 07D6                ?_adc_init 0072  
             ??_adc_init 0072                  __ptext1 07C9                  __ptext2 07C0  
   end_of_initialization 07FD                _TRISAbits 008C      start_initialization 07FB  
            __pbssCOMMON 0070                ___latbits 0003                 _LATAbits 010C  
             _ADCON0bits 009D                 _adc_init 07C0               _ANSELAbits 018C  
